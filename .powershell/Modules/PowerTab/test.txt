gps | gm | sort typename -u |% {(iex "[$($_.typename)]").GetMembers()} | select name,returntype,propertytype |? {$_.name -like "*"} | %{(iex "[$($_.PropertyType;$_.returntype)]").getmembers() } | sort -u name | select name,returntype,propertytype

function Resolve-ExpressionMembers ($command,$Filter = ""){
  $members = iex "$command | gm" | sort typename -u |% { (iex "[$($_.typename)]").GetMembers() |? {'Property','Method' -contains $_.MemberType}}
  $parts = $filter.split('.')
  if ($parts.length -eq 1) {
    $members |? {$_.name -like "$filter*"} | sort -u name |% {
      if ($_.MemberType -eq 'Method') {$_.name + '('}
      if ($_.MemberType -eq 'Property') {$_.name}
    }
  } Else {
    $m = $members
    $parts[0..($parts.length -2)] |% {
      $prop = $_ -replace '\(.*\)',''
      $m |? {$_.name -eq $prop} |% { 
        if ($_.PropertyType) {$type = $_.PropertyType.tostring()} 
        if ($_.ReturnType) {$type = $_.ReturnType.tostring()} 
        $n =(iex "[$type]").GetMembers() |? {'Property','Method' -contains $_.MemberType}
      }
      $m = $n
    }
    $m |? {$_.name -like "$($parts[-1])*"} | sort -u name |% {
      if ($_.MemberType -eq 'Method') {$_.name + '('}
      if ($_.MemberType -eq 'Property') {$_.name}
   }
  }
}


add-module test { [int]$var = 10; [int]$par = 10
function count { $script:var += 1; write-output $var; . part }
function part  { $script:par += 2; write-output $par }
export-modulemember count
} -force